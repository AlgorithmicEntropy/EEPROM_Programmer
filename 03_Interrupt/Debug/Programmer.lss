
Programmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3a  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007420  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ee  00000000  00000000  00009418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00009806  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a20  00000000  00000000  0000988e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9e d0       	rcall	.+316    	; 0x1d8 <main>
  9c:	0f c1       	rjmp	.+542    	; 0x2bc <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <shiftOut>:
char IO_Mode = 0;

void setupEEPROM()
{
	//set pin for read mode
	_setInputMode();
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	08 2e       	mov	r0, r24
  a6:	00 0c       	add	r0, r0
  a8:	99 0b       	sbc	r25, r25
  aa:	ac 01       	movw	r20, r24
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <shiftOut+0x14>
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <shiftOut+0x10>
  b8:	40 ff       	sbrs	r20, 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <shiftOut+0x20>
  bc:	5d 9a       	sbi	0x0b, 5	; 11
  be:	01 c0       	rjmp	.+2      	; 0xc2 <shiftOut+0x22>
  c0:	5d 98       	cbi	0x0b, 5	; 11
  c2:	5c 9a       	sbi	0x0b, 4	; 11
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	69 f7       	brne	.-38     	; 0xaa <shiftOut+0xa>
  d0:	5b 9a       	sbi	0x0b, 3	; 11
  d2:	5b 98       	cbi	0x0b, 3	; 11
  d4:	08 95       	ret

000000d6 <setupShiftIO>:
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 63       	ori	r24, 0x38	; 56
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	08 95       	ret

000000de <setupSerial>:
  de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	80 83       	st	Z, r24
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	80 81       	ld	r24, Z
  fe:	88 61       	ori	r24, 0x18	; 24
 100:	80 83       	st	Z, r24
 102:	e2 ec       	ldi	r30, 0xC2	; 194
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	86 60       	ori	r24, 0x06	; 6
 10a:	80 83       	st	Z, r24
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <USART_receive>:
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	85 ff       	sbrs	r24, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_receive+0x4>
 11a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 11e:	08 95       	ret

00000120 <USART_send>:
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_send+0x4>
 12a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 12e:	08 95       	ret

00000130 <_writeDataByte>:
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	9f 73       	andi	r25, 0x3F	; 63
 134:	9b b9       	out	0x0b, r25	; 11
 136:	9b b1       	in	r25, 0x0b	; 11
 138:	28 2f       	mov	r18, r24
 13a:	20 7c       	andi	r18, 0xC0	; 192
 13c:	92 2b       	or	r25, r18
 13e:	9b b9       	out	0x0b, r25	; 11
 140:	95 b1       	in	r25, 0x05	; 5
 142:	9f 73       	andi	r25, 0x3F	; 63
 144:	89 23       	and	r24, r25
 146:	85 b9       	out	0x05, r24	; 5
 148:	08 95       	ret

0000014a <_readDataByte>:
 14a:	29 b1       	in	r18, 0x09	; 9
 14c:	93 b1       	in	r25, 0x03	; 3
 14e:	20 7c       	andi	r18, 0xC0	; 192
 150:	89 2f       	mov	r24, r25
 152:	8f 73       	andi	r24, 0x3F	; 63
 154:	82 2b       	or	r24, r18
 156:	08 95       	ret

00000158 <_setInputMode>:
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	8f 73       	andi	r24, 0x3F	; 63
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	80 7c       	andi	r24, 0xC0	; 192
 162:	84 b9       	out	0x04, r24	; 4
 164:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <IO_Mode>
 168:	08 95       	ret

0000016a <readEEPROM>:
	//write data byte
	_writeDataByte(lineData[2]);
}

void readEEPROM(int startAddress, int endAddress)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
 174:	8b 01       	movw	r16, r22
	if (IO_Mode)
 176:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <IO_Mode>
 17a:	81 11       	cpse	r24, r1
	{
		_setInputMode();
 17c:	ed df       	rcall	.-38     	; 0x158 <_setInputMode>
	}
	
	for (int i = startAddress; i < endAddress; i++)
 17e:	c0 17       	cp	r28, r16
 180:	d1 07       	cpc	r29, r17
 182:	54 f4       	brge	.+20     	; 0x198 <readEEPROM+0x2e>
	{
		//shift address low and high byte
		shiftOut(i << 8);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	8c df       	rcall	.-232    	; 0xa0 <shiftOut>
		shiftOut(i);
 188:	8c 2f       	mov	r24, r28
		
		//read byte and send via serial
		USART_send(_readDataByte());
 18a:	8a df       	rcall	.-236    	; 0xa0 <shiftOut>
 18c:	de df       	rcall	.-68     	; 0x14a <_readDataByte>
 18e:	c8 df       	rcall	.-112    	; 0x120 <USART_send>
 190:	21 96       	adiw	r28, 0x01	; 1
	if (IO_Mode)
	{
		_setInputMode();
	}
	
	for (int i = startAddress; i < endAddress; i++)
 192:	c0 17       	cp	r28, r16
 194:	d1 07       	cpc	r29, r17
 196:	b4 f3       	brlt	.-20     	; 0x184 <readEEPROM+0x1a>
 198:	df 91       	pop	r29
		shiftOut(i);
		
		//read byte and send via serial
		USART_send(_readDataByte());
	}
}
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <_setOutputMode>:
 1a2:	8a b1       	in	r24, 0x0a	; 10
	IO_Mode = 0;
}

void _setOutputMode()
{
	DDRD |= D0 | D1;
 1a4:	80 6c       	ori	r24, 0xC0	; 192
 1a6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= D2 | D3 | D4 | D5 | D6 | D7;
 1a8:	84 b1       	in	r24, 0x04	; 4
 1aa:	8f 63       	ori	r24, 0x3F	; 63
 1ac:	84 b9       	out	0x04, r24	; 4
	
	IO_Mode = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <IO_Mode>
 1b4:	08 95       	ret

000001b6 <writeEEPROM>:
	_setInputMode();
	
}

void writeEEPROM(unsigned char lineData[3])
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	if (!IO_Mode)
 1bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <IO_Mode>
 1c0:	81 11       	cpse	r24, r1
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <writeEEPROM+0x10>
	{
		_setOutputMode();
 1c4:	ee df       	rcall	.-36     	; 0x1a2 <_setOutputMode>
	}
	//shift address
	for (int i = 0; i < 2; i++)
	{
		shiftOut(lineData[i]);
 1c6:	88 81       	ld	r24, Y
 1c8:	6b df       	rcall	.-298    	; 0xa0 <shiftOut>
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	69 df       	rcall	.-302    	; 0xa0 <shiftOut>
	}
	
	//write data byte
	_writeDataByte(lineData[2]);
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	af df       	rcall	.-162    	; 0x130 <_writeDataByte>
 1d2:	df 91       	pop	r29
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <main>:
 1d8:	7e df       	rcall	.-260    	; 0xd6 <setupShiftIO>

int main(void)
{
	//startup code - setup pin modes etc
	setupShiftIO();
	setupSerial();
 1da:	81 df       	rcall	.-254    	; 0xde <setupSerial>
char IO_Mode = 0;

void setupEEPROM()
{
	//set pin for read mode
	_setInputMode();
 1dc:	bd df       	rcall	.-134    	; 0x158 <_setInputMode>
	setupEEPROM();
	
	//indicate successful startup, ready for data
	shiftOut(0x55);
 1de:	85 e5       	ldi	r24, 0x55	; 85
 1e0:	5f df       	rcall	.-322    	; 0xa0 <shiftOut>
	
	while (1)
	{
		for (char i = 0; i < 256; i++)
		{
			shiftOut(i);
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	8c 2f       	mov	r24, r28
 1e6:	5c df       	rcall	.-328    	; 0xa0 <shiftOut>
			shiftOut(i);
 1e8:	8c 2f       	mov	r24, r28
 1ea:	5a df       	rcall	.-332    	; 0xa0 <shiftOut>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	81 ee       	ldi	r24, 0xE1	; 225
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x1a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x24>
 1fc:	00 00       	nop
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	f1 cf       	rjmp	.-30     	; 0x1e4 <main+0xc>

00000202 <EvalCommand>:
 202:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <commandBuffer>
}

//evaluate command buffer for instructions
void EvalCommand()
{
	if (commandBuffer[0] == writeByte)
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	19 f4       	brne	.+6      	; 0x210 <EvalCommand+0xe>
	{
		//write mode confirmed - route write further data to eeprom
		writeMode = true;
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <writeMode>
 20e:	08 95       	ret
	}
	else if (commandBuffer[0] == readByte)
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	41 f4       	brne	.+16     	; 0x224 <EvalCommand+0x22>
	{
		// read mode confirmed - read eeprom between given addresses
		readEEPROM(commandBuffer[1], commandBuffer[2]);
 214:	e5 e0       	ldi	r30, 0x05	; 5
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	62 81       	ldd	r22, Z+2	; 0x02
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	81 81       	ldd	r24, Z+1	; 0x01
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	a4 cf       	rjmp	.-184    	; 0x16a <readEEPROM>
 222:	08 95       	ret
	}
	else if (commandBuffer[0] == startByte)
 224:	85 35       	cpi	r24, 0x55	; 85
 226:	29 f4       	brne	.+10     	; 0x232 <EvalCommand+0x30>
	{
		//process finished - send to sleep mode
		idleMode = true;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		writeMode = false;
 22e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <writeMode>
 232:	08 95       	ret

00000234 <__vector_18>:
		}
	}
}

ISR(USART_RX_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	unsigned char data = USART_receive();
 256:	5c df       	rcall	.-328    	; 0x110 <USART_receive>
	
	//valid start byte received - listening for full command
	if (idleMode && data == startByte)
 258:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 25c:	99 23       	and	r25, r25
 25e:	29 f0       	breq	.+10     	; 0x26a <__vector_18+0x36>
 260:	85 35       	cpi	r24, 0x55	; 85
 262:	d9 f4       	brne	.+54     	; 0x29a <__vector_18+0x66>
	{
		idleMode = false;
 264:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 268:	18 c0       	rjmp	.+48     	; 0x29a <__vector_18+0x66>
	}
	
	else if (!idleMode)
	{
		if (bufferCounter < 3)
 26a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 26e:	93 30       	cpi	r25, 0x03	; 3
 270:	48 f4       	brcc	.+18     	; 0x284 <__vector_18+0x50>
		{
			//write received byte do buffer array and increase counter
			commandBuffer[bufferCounter] = data;
 272:	e9 2f       	mov	r30, r25
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	eb 5f       	subi	r30, 0xFB	; 251
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	80 83       	st	Z, r24
			bufferCounter++;
 27c:	9f 5f       	subi	r25, 0xFF	; 255
 27e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
 282:	0b c0       	rjmp	.+22     	; 0x29a <__vector_18+0x66>
		}
		else
		{
			if (writeMode)
 284:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <writeMode>
 288:	88 23       	and	r24, r24
 28a:	21 f0       	breq	.+8      	; 0x294 <__vector_18+0x60>
			{
				//in write mode --> write data to eeprom
				writeEEPROM(commandBuffer);
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	92 df       	rcall	.-220    	; 0x1b6 <writeEEPROM>
			}
			else
			{
				//no defined state - check received data for instructions
				EvalCommand();
 292:	01 c0       	rjmp	.+2      	; 0x296 <__vector_18+0x62>
 294:	b6 df       	rcall	.-148    	; 0x202 <EvalCommand>
			}
			
			//reset counter
			bufferCounter = 0;
 296:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		}
	}
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
