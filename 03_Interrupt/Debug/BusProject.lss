
BusProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ac  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006c5e  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006b  00000000  00000000  00007f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00007f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002783  00000000  00000000  00007f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__vector_1>
   6:	00 00       	nop
   8:	43 c0       	rjmp	.+134    	; 0x90 <__vector_2>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	1b d0       	rcall	.+54     	; 0xac <main>
  76:	2d c0       	rjmp	.+90     	; 0xd2 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "bus.h"

ISR (INT0_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
	PORTB=0x00;
  84:	15 b8       	out	0x05, r1	; 5
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <__vector_2>:

ISR (INT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	PORTB=0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	85 b9       	out	0x05, r24	; 5
}
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <main>:

int main(void)
{
	DDRB=0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB=0xFF;
  b0:	85 b9       	out	0x05, r24	; 5
	
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
  b2:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
  b4:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled
	
	DDRD &= ~(1 << DDD3);     // Clear the PD3 pin
  b6:	53 98       	cbi	0x0a, 3	; 10
	// PD3 (PCINT1 pin) is now an input

	PORTD |= (1 << PORTD3);    // turn On the Pull-up
  b8:	5b 9a       	sbi	0x0b, 3	; 11
	// PD3 is now an input with pull-up enabled




	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
  ba:	e9 e6       	ldi	r30, 0x69	; 105
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
	EICRA |= (1 << ISC10);    // set INT1 to trigger on ANY logic change
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
  ca:	e8 9a       	sbi	0x1d, 0	; 29
	EIMSK |= (1 << INT1);     // Turns on INT1
  cc:	e9 9a       	sbi	0x1d, 1	; 29

	sei();                    // turn on interrupts
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x24>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
