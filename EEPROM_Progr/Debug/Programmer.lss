
Programmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004dc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d6  00800102  00800102  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000934  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000075e8  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000643  00000000  00000000  00009de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000a42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a68  00000000  00000000  0000a4db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	03 c1       	rjmp	.+518    	; 0x250 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3d       	cpi	r26, 0xD8	; 216
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	f9 d1       	rcall	.+1010   	; 0x48e <main>
  9c:	1d c2       	rjmp	.+1082   	; 0x4d8 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <shiftOutChar>:
	while (str[i] != 0x00)
	{
		USART_putByte(str[i]);
		i++;
	}
}
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	27 e0       	ldi	r18, 0x07	; 7
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	08 2e       	mov	r0, r24
  aa:	00 0c       	add	r0, r0
  ac:	99 0b       	sbc	r25, r25
  ae:	a7 e0       	ldi	r26, 0x07	; 7
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	44 23       	and	r20, r20
  b4:	79 f0       	breq	.+30     	; 0xd4 <shiftOutChar+0x34>
  b6:	fd 01       	movw	r30, r26
  b8:	e2 1b       	sub	r30, r18
  ba:	f3 0b       	sbc	r31, r19
  bc:	ec 01       	movw	r28, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <shiftOutChar+0x24>
  c0:	d5 95       	asr	r29
  c2:	c7 95       	ror	r28
  c4:	ea 95       	dec	r30
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <shiftOutChar+0x20>
  c8:	c0 ff       	sbrs	r28, 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <shiftOutChar+0x30>
  cc:	5d 9a       	sbi	0x0b, 5	; 11
  ce:	0e c0       	rjmp	.+28     	; 0xec <shiftOutChar+0x4c>
  d0:	5d 98       	cbi	0x0b, 5	; 11
  d2:	0c c0       	rjmp	.+24     	; 0xec <shiftOutChar+0x4c>
  d4:	fc 01       	movw	r30, r24
  d6:	02 2e       	mov	r0, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <shiftOutChar+0x3e>
  da:	f5 95       	asr	r31
  dc:	e7 95       	ror	r30
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <shiftOutChar+0x3a>
  e2:	e0 ff       	sbrs	r30, 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <shiftOutChar+0x4a>
  e6:	5d 9a       	sbi	0x0b, 5	; 11
  e8:	01 c0       	rjmp	.+2      	; 0xec <shiftOutChar+0x4c>
  ea:	5d 98       	cbi	0x0b, 5	; 11
  ec:	5c 9a       	sbi	0x0b, 4	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	31 09       	sbc	r19, r1
  f4:	f0 f6       	brcc	.-68     	; 0xb2 <shiftOutChar+0x12>
  f6:	66 23       	and	r22, r22
  f8:	11 f0       	breq	.+4      	; 0xfe <shiftOutChar+0x5e>
  fa:	5b 9a       	sbi	0x0b, 3	; 11
  fc:	5b 98       	cbi	0x0b, 3	; 11
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <shiftOutShort>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	89 2f       	mov	r24, r25
 10e:	c8 df       	rcall	.-112    	; 0xa0 <shiftOutChar>
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c 2f       	mov	r24, r28
 116:	c4 df       	rcall	.-120    	; 0xa0 <shiftOutChar>
 118:	5b 9a       	sbi	0x0b, 3	; 11
 11a:	5b 98       	cbi	0x0b, 3	; 11
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <setupShiftIO>:
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	88 63       	ori	r24, 0x38	; 56
 124:	8a b9       	out	0x0a, r24	; 10
 126:	08 95       	ret

00000128 <setupFIFO>:
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <buffer+0xc9>
 130:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <buffer+0xc8>
 134:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <buffer+0xcb>
 138:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <buffer+0xca>
 13c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <buffer+0xcc>
 140:	08 95       	ret

00000142 <BufferIn>:
 142:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <buffer+0xca>
 146:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <buffer+0xcb>
 14a:	af 01       	movw	r20, r30
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <buffer+0xc8>
 154:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <buffer+0xc9>
 158:	42 17       	cp	r20, r18
 15a:	53 07       	cpc	r21, r19
 15c:	11 f1       	breq	.+68     	; 0x1a2 <BufferIn+0x60>
 15e:	29 50       	subi	r18, 0x09	; 9
 160:	31 40       	sbci	r19, 0x01	; 1
 162:	19 f4       	brne	.+6      	; 0x16a <BufferIn+0x28>
 164:	40 5d       	subi	r20, 0xD0	; 208
 166:	51 40       	sbci	r21, 0x01	; 1
 168:	f1 f0       	breq	.+60     	; 0x1a6 <BufferIn+0x64>
 16a:	80 83       	st	Z, r24
 16c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <buffer+0xca>
 170:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <buffer+0xcb>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	80 3d       	cpi	r24, 0xD0	; 208
 17a:	92 07       	cpc	r25, r18
 17c:	28 f4       	brcc	.+10     	; 0x188 <BufferIn+0x46>
 17e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <buffer+0xcb>
 182:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <buffer+0xca>
 186:	06 c0       	rjmp	.+12     	; 0x194 <BufferIn+0x52>
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <buffer+0xcb>
 190:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <buffer+0xca>
 194:	e5 ed       	ldi	r30, 0xD5	; 213
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 81       	ld	r24, Z
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 83       	st	Z, r24
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret

000001aa <BufferOut>:
 1aa:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <buffer+0xc8>
 1ae:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <buffer+0xc9>
 1b2:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <buffer+0xca>
 1b6:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <buffer+0xcb>
 1ba:	e2 17       	cp	r30, r18
 1bc:	f3 07       	cpc	r31, r19
 1be:	f1 f0       	breq	.+60     	; 0x1fc <BufferOut+0x52>
 1c0:	20 81       	ld	r18, Z
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
 1c6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <buffer+0xc8>
 1ca:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <buffer+0xc9>
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	80 3d       	cpi	r24, 0xD0	; 208
 1d4:	9f 07       	cpc	r25, r31
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <BufferOut+0x38>
 1d8:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <buffer+0xc9>
 1dc:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <buffer+0xc8>
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <BufferOut+0x44>
 1e2:	89 e0       	ldi	r24, 0x09	; 9
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <buffer+0xc9>
 1ea:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <buffer+0xc8>
 1ee:	e5 ed       	ldi	r30, 0xD5	; 213
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret

00000200 <setupSerial>:
 200:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 20a:	e0 ec       	ldi	r30, 0xC0	; 192
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	80 83       	st	Z, r24
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	80 83       	st	Z, r24
 21e:	80 81       	ld	r24, Z
 220:	88 61       	ori	r24, 0x18	; 24
 222:	80 83       	st	Z, r24
 224:	e2 ec       	ldi	r30, 0xC2	; 194
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	86 60       	ori	r24, 0x06	; 6
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <_USART_receive>:
 230:	e0 ec       	ldi	r30, 0xC0	; 192
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	85 ff       	sbrs	r24, 5
 238:	fd cf       	rjmp	.-6      	; 0x234 <_USART_receive+0x4>
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 23e:	08 95       	ret

00000240 <_USART_send>:
 240:	e0 ec       	ldi	r30, 0xC0	; 192
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	90 81       	ld	r25, Z
 246:	95 ff       	sbrs	r25, 5
 248:	fd cf       	rjmp	.-6      	; 0x244 <_USART_send+0x4>
 24a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 24e:	08 95       	ret

00000250 <__vector_18>:
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
 272:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <buffer+0xcc>
 276:	87 39       	cpi	r24, 0x97	; 151
 278:	20 f0       	brcs	.+8      	; 0x282 <__vector_18+0x32>
 27a:	83 e1       	ldi	r24, 0x13	; 19
 27c:	e1 df       	rcall	.-62     	; 0x240 <_USART_send>
 27e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <FLOW_STATUS>
 282:	d6 df       	rcall	.-84     	; 0x230 <_USART_receive>
 284:	5e df       	rcall	.-324    	; 0x142 <BufferIn>
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <USART_putByte>:
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
 2ac:	8f ee       	ldi	r24, 0xEF	; 239
 2ae:	8c 0f       	add	r24, r28
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	20 f0       	brcs	.+8      	; 0x2bc <USART_putByte+0x14>
 2b4:	cf 30       	cpi	r28, 0x0F	; 15
 2b6:	11 f0       	breq	.+4      	; 0x2bc <USART_putByte+0x14>
 2b8:	c5 35       	cpi	r28, 0x55	; 85
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <USART_putByte+0x20>
 2bc:	8f e0       	ldi	r24, 0x0F	; 15
 2be:	c0 df       	rcall	.-128    	; 0x240 <_USART_send>
 2c0:	8c 2f       	mov	r24, r28
 2c2:	80 95       	com	r24
 2c4:	bd df       	rcall	.-134    	; 0x240 <_USART_send>
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <USART_putByte+0x24>
 2c8:	8c 2f       	mov	r24, r28
 2ca:	ba df       	rcall	.-140    	; 0x240 <_USART_send>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <_readDataByte>:
}

uint8_t _readDataByte()
{
	uint8_t data = 0;
	data |= (PIND & PortD_Mask);
 2d0:	29 b1       	in	r18, 0x09	; 9
	data |= (PINB & PortB_Mask);
 2d2:	93 b1       	in	r25, 0x03	; 3
	return data;
 2d4:	20 7c       	andi	r18, 0xC0	; 192
 2d6:	89 2f       	mov	r24, r25
 2d8:	8f 73       	andi	r24, 0x3F	; 63
}
 2da:	82 2b       	or	r24, r18
 2dc:	08 95       	ret

000002de <_setInputMode>:

void _setInputMode()
{
	//set DDRD to input mode for pin 6 & 7
	DDRD &= ~(D6 | D7);
 2de:	8a b1       	in	r24, 0x0a	; 10
 2e0:	8f 73       	andi	r24, 0x3F	; 63
 2e2:	8a b9       	out	0x0a, r24	; 10
	//set DDRB to input for pin 8 to 13
	DDRB &= ~(D0| D1 | D2 | D3 | D4 | D5);
 2e4:	84 b1       	in	r24, 0x04	; 4
 2e6:	80 7c       	andi	r24, 0xC0	; 192
 2e8:	84 b9       	out	0x04, r24	; 4

	IO_Mode = 0;
 2ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <IO_Mode>
 2ee:	08 95       	ret

000002f0 <setupEEPROM>:
char IO_Mode = 0;

void setupEEPROM()
{
	//set pin for read mode
	_setInputMode();
 2f0:	f6 df       	rcall	.-20     	; 0x2de <_setInputMode>
	
	//set we direction reg
	DDRD |= WE;
 2f2:	52 9a       	sbi	0x0a, 2	; 10
	//set we high
	writeEnable_HIGH();
 2f4:	5a 9a       	sbi	0x0b, 2	; 11
 2f6:	08 95       	ret

000002f8 <readEEPROM>:
	//write data byte
	_writeDataByte(*start);
}

void readEEPROM(uint16_t startAddress, uint16_t endAddress)
{
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	e8 2e       	mov	r14, r24
 306:	f9 2e       	mov	r15, r25
 308:	8b 01       	movw	r16, r22
	//check for correct pin mode
	if (IO_Mode)
 30a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <IO_Mode>
 30e:	81 11       	cpse	r24, r1
	{
		_setInputMode();
 310:	e6 df       	rcall	.-52     	; 0x2de <_setInputMode>
	}
	
	for (register int i = startAddress; i < endAddress; i++)
 312:	ce 2d       	mov	r28, r14
 314:	df 2d       	mov	r29, r15
 316:	c0 17       	cp	r28, r16
 318:	d1 07       	cpc	r29, r17
 31a:	78 f4       	brcc	.+30     	; 0x33a <readEEPROM+0x42>
	{
		//shift address high and low byte
		shiftOutShort(i & ~(1 << 15));
 31c:	ce 01       	movw	r24, r28
 31e:	9f 77       	andi	r25, 0x7F	; 127
		//read byte and send via serial
		USART_putByte(_readDataByte());
 320:	f1 de       	rcall	.-542    	; 0x104 <shiftOutShort>
 322:	d6 df       	rcall	.-84     	; 0x2d0 <_readDataByte>
 324:	c1 df       	rcall	.-126    	; 0x2a8 <USART_putByte>
 326:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <readEEPROM+0x32>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <readEEPROM+0x38>
 330:	00 00       	nop
 332:	21 96       	adiw	r28, 0x01	; 1
	if (IO_Mode)
	{
		_setInputMode();
	}
	
	for (register int i = startAddress; i < endAddress; i++)
 334:	c0 17       	cp	r28, r16
 336:	d1 07       	cpc	r29, r17
 338:	88 f3       	brcs	.-30     	; 0x31c <readEEPROM+0x24>
 33a:	df 91       	pop	r29
		//read byte and send via serial
		USART_putByte(_readDataByte());
		
		_delay_ms(0.1);
	}
}
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <_writeDataByte>:
 348:	cf 93       	push	r28

void _writeDataByte(uint8_t data)
{
 34a:	df 93       	push	r29
 34c:	c8 2f       	mov	r28, r24
	//set portD
	PORTD &= ~PortD_Mask;
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	8f 73       	andi	r24, 0x3F	; 63
 352:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (data & PortD_Mask);
 354:	8b b1       	in	r24, 0x0b	; 11
 356:	9c 2f       	mov	r25, r28
 358:	90 7c       	andi	r25, 0xC0	; 192
 35a:	89 2b       	or	r24, r25
 35c:	8b b9       	out	0x0b, r24	; 11
	//
	////set portB
	PORTB &= ~PortB_Mask;
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	80 7c       	andi	r24, 0xC0	; 192
 362:	85 b9       	out	0x05, r24	; 5
	PORTB |= (data & PortB_Mask);
 364:	85 b1       	in	r24, 0x05	; 5
 366:	9c 2f       	mov	r25, r28
 368:	9f 73       	andi	r25, 0x3F	; 63
 36a:	89 2b       	or	r24, r25
 36c:	85 b9       	out	0x05, r24	; 5
	
	
	//latch add --> falling edge
	writeEnable_LOW();
 36e:	5a 98       	cbi	0x0b, 2	; 11
 370:	87 e4       	ldi	r24, 0x47	; 71
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <_writeDataByte+0x2c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <_writeDataByte+0x32>
 37a:	00 00       	nop
	_delay_ms(0.21);
	//latch data --> rising edge
	writeEnable_HIGH();
 37c:	5a 9a       	sbi	0x0b, 2	; 11
 37e:	8f e3       	ldi	r24, 0x3F	; 63
 380:	9c e9       	ldi	r25, 0x9C	; 156
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <_writeDataByte+0x3a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <_writeDataByte+0x40>
 388:	00 00       	nop
	
	//sleep for write to end
	_delay_ms(10);
	_setInputMode();
 38a:	a9 df       	rcall	.-174    	; 0x2de <_setInputMode>
	while (_readDataByte() == ~data)
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	c0 95       	com	r28
 390:	d0 95       	com	r29
 392:	02 c0       	rjmp	.+4      	; 0x398 <_writeDataByte+0x50>
	{
		USART_putByte(0xFF);
 394:	8f ef       	ldi	r24, 0xFF	; 255
	writeEnable_HIGH();
	
	//sleep for write to end
	_delay_ms(10);
	_setInputMode();
	while (_readDataByte() == ~data)
 396:	88 df       	rcall	.-240    	; 0x2a8 <USART_putByte>
 398:	9b df       	rcall	.-202    	; 0x2d0 <_readDataByte>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	8c 17       	cp	r24, r28
 39e:	9d 07       	cpc	r25, r29
 3a0:	c9 f3       	breq	.-14     	; 0x394 <_writeDataByte+0x4c>
	{
		USART_putByte(0xFF);
	} 
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <_setOutputMode>:
	IO_Mode = 0;
}

void _setOutputMode()
{
	DDRD |= D6 | D7;
 3a8:	8a b1       	in	r24, 0x0a	; 10
 3aa:	80 6c       	ori	r24, 0xC0	; 192
 3ac:	8a b9       	out	0x0a, r24	; 10
	DDRB |= D0 | D1 | D2 | D3 | D4 | D5;
 3ae:	84 b1       	in	r24, 0x04	; 4
 3b0:	8f 63       	ori	r24, 0x3F	; 63
 3b2:	84 b9       	out	0x04, r24	; 4
	
	IO_Mode = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <IO_Mode>
 3ba:	08 95       	ret

000003bc <writeEEPROM>:
	writeEnable_HIGH();
	
}

void writeEEPROM(uint8_t *start)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	ec 01       	movw	r28, r24
	//check for correct pin mode
	if (!IO_Mode)
 3c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <IO_Mode>
 3c6:	81 11       	cpse	r24, r1
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <writeEEPROM+0x10>
	{
		_setOutputMode();
 3ca:	ee df       	rcall	.-36     	; 0x3a8 <_setOutputMode>
	//shift address
	register uint8_t add_H = *start;
	start++;
	register uint8_t add_L = *start;
	start++;
	shiftOutShort((add_H << 8) | (uint16_t)(add_L) | 1 << 15);
 3cc:	28 81       	ld	r18, Y
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 68       	ori	r25, 0x80	; 128
 3d4:	92 2b       	or	r25, r18
 3d6:	96 de       	rcall	.-724    	; 0x104 <shiftOutShort>
	
	//write data byte
	_writeDataByte(*start);
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	b6 df       	rcall	.-148    	; 0x348 <_writeDataByte>
 3dc:	df 91       	pop	r29
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <EvalCommand>:
 3e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
}

//evaluate command buffer for instructions
void EvalCommand()
{
	if (writeMode)
 3e6:	88 23       	and	r24, r24
 3e8:	61 f0       	breq	.+24     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		if (command[0] != 0xFF) //--> valid eeprom address -> max 15bit -> 0xff as address high-byte would be invalid
 3ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <command>
 3ee:	8f 3f       	cpi	r24, 0xFF	; 255
 3f0:	21 f0       	breq	.+8      	; 0x3fa <EvalCommand+0x18>
		{
			//write command data to eeprom
			writeEEPROM(command);
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	e2 df       	rcall	.-60     	; 0x3bc <writeEEPROM>
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}
		else
		{
			//leave write mode
			writeMode = 0;
 3fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			//confirm mode switch with ACK
			SEND_ACK();
 3fe:	85 e5       	ldi	r24, 0x55	; 85
 400:	1f df       	rcall	.-450    	; 0x240 <_USART_send>
		}
	}
	
	if (command[0] == enableWrite)
 402:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <command>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	29 f4       	brne	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		//switch programmer to write mode
		writeMode = 1;
 40a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//confirm mode switch with ACK
		SEND_ACK();
 40e:	85 e5       	ldi	r24, 0x55	; 85
 410:	17 cf       	rjmp	.-466    	; 0x240 <_USART_send>
 412:	08 95       	ret
	}
	else if (command[0] == enableRead)
 414:	84 30       	cpi	r24, 0x04	; 4
 416:	91 f4       	brne	.+36     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		if (readStartAddress < readEndAddress)
 418:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <readStartAddress>
 41c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <readStartAddress+0x1>
 420:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <readEndAddress>
 424:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <readEndAddress+0x1>
 428:	86 17       	cp	r24, r22
 42a:	97 07       	cpc	r25, r23
		{
			readEEPROM(readStartAddress, readEndAddress);
 42c:	20 f4       	brcc	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	64 df       	rcall	.-312    	; 0x2f8 <readEEPROM>
			//read finished - confirm with ACK
			SEND_ACK();
 430:	85 e5       	ldi	r24, 0x55	; 85
 432:	06 cf       	rjmp	.-500    	; 0x240 <_USART_send>
 434:	08 95       	ret
		}
		else
		{
			//invalid address configuration
			SEND_ERR();
 436:	82 e1       	ldi	r24, 0x12	; 18
 438:	03 cf       	rjmp	.-506    	; 0x240 <_USART_send>
 43a:	08 95       	ret
 43c:	82 30       	cpi	r24, 0x02	; 2
		}
	}
	else if (command[0] == setReadStartAdd)
 43e:	89 f4       	brne	.+34     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 440:	e6 e0       	ldi	r30, 0x06	; 6
	{
		//build 16 bit address from 2 bytes
		readStartAddress |= (uint16_t)command[1] << 8;
		readStartAddress |= (uint16_t)command[2];
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	22 81       	ldd	r18, Z+2	; 0x02
 446:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <readStartAddress>
 44a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <readStartAddress+0x1>
 44e:	82 2b       	or	r24, r18
 450:	21 81       	ldd	r18, Z+1	; 0x01
 452:	92 2b       	or	r25, r18
 454:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <readStartAddress+0x1>
 458:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <readStartAddress>
		SEND_ACK();
 45c:	85 e5       	ldi	r24, 0x55	; 85
 45e:	f0 ce       	rjmp	.-544    	; 0x240 <_USART_send>
 460:	08 95       	ret
 462:	86 30       	cpi	r24, 0x06	; 6
	}
	else if (command[0] == setReadEndAdd)
 464:	89 f4       	brne	.+34     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 466:	e6 e0       	ldi	r30, 0x06	; 6
	{
		//build 16 bit address from 2 bytes
		readEndAddress |= (uint16_t)command[1] << 8;
		readEndAddress |= (uint16_t)command[2];
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	22 81       	ldd	r18, Z+2	; 0x02
 46c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <readEndAddress>
 470:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <readEndAddress+0x1>
 474:	82 2b       	or	r24, r18
 476:	21 81       	ldd	r18, Z+1	; 0x01
 478:	92 2b       	or	r25, r18
 47a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readEndAddress+0x1>
 47e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readEndAddress>
		SEND_ACK();
 482:	85 e5       	ldi	r24, 0x55	; 85
 484:	dd ce       	rjmp	.-582    	; 0x240 <_USART_send>
 486:	08 95       	ret
	}
	else
	{
		SEND_ERR();
 488:	82 e1       	ldi	r24, 0x12	; 18
 48a:	da ce       	rjmp	.-588    	; 0x240 <_USART_send>
 48c:	08 95       	ret

0000048e <main>:
 48e:	48 de       	rcall	.-880    	; 0x120 <setupShiftIO>

int main(void)
{
	//startup code - setup pin modes etc
	setupShiftIO();
	setupSerial();
 490:	b7 de       	rcall	.-658    	; 0x200 <setupSerial>
	setupEEPROM();
 492:	2e df       	rcall	.-420    	; 0x2f0 <setupEEPROM>
 494:	49 de       	rcall	.-878    	; 0x128 <setupFIFO>
	setupFIFO();
 496:	78 94       	sei
	
	//enable interrupts
	sei();
 498:	85 e5       	ldi	r24, 0x55	; 85
	
	//indicate successful startup, ready for data
	SEND_ACK();
 49a:	d2 de       	rcall	.-604    	; 0x240 <_USART_send>
 49c:	c5 ed       	ldi	r28, 0xD5	; 213
 49e:	d1 e0       	ldi	r29, 0x01	; 1
	
	//loop and wait for serial interrupt
	while (1)
	{
		//buffer getting empty --> reenable serial comm with XON
		if (!FLOW_STATUS && buffer.counter < BUFFER_THREASHOLD_LOWER)
 4a0:	11 e0       	ldi	r17, 0x01	; 1
 4a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <FLOW_STATUS>
 4a6:	81 11       	cpse	r24, r1
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <main+0x2a>
 4aa:	88 81       	ld	r24, Y
 4ac:	84 31       	cpi	r24, 0x14	; 20
 4ae:	20 f4       	brcc	.+8      	; 0x4b8 <main+0x2a>
 4b0:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <FLOW_STATUS>
		{
			FLOW_STATUS = 1;
 4b4:	81 e1       	ldi	r24, 0x11	; 17
			_USART_send(XON);
 4b6:	c4 de       	rcall	.-632    	; 0x240 <_USART_send>
 4b8:	88 81       	ld	r24, Y
 4ba:	83 30       	cpi	r24, 0x03	; 3
		}
				
		//only run if buffer contains at least 3 bytes
		if (buffer.counter < 3)
 4bc:	90 f3       	brcs	.-28     	; 0x4a2 <main+0x14>
 4be:	f8 94       	cli
		}
		
		//disable interrupts -> atomic reading from fifo
		cli();
		//read 3 bytes
		BufferOut(command);
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	72 de       	rcall	.-796    	; 0x1aa <BufferOut>
		BufferOut(command+1);
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	6f de       	rcall	.-802    	; 0x1aa <BufferOut>
		BufferOut(command+2);
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	6c de       	rcall	.-808    	; 0x1aa <BufferOut>
 4d2:	78 94       	sei
		//re-enable interrupts
		sei();
 4d4:	86 df       	rcall	.-244    	; 0x3e2 <EvalCommand>
		//parse 3 byte command
		EvalCommand();
 4d6:	e5 cf       	rjmp	.-54     	; 0x4a2 <main+0x14>

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
