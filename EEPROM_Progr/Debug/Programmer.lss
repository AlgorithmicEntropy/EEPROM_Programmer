
Programmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000576  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800102  00800102  0000060c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7a  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000908  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007811  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  0000a101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002acd  00000000  00000000  0000a842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	3c c1       	rjmp	.+632    	; 0x2c2 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 37       	cpi	r26, 0x76	; 118
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	46 d2       	rcall	.+1164   	; 0x528 <main>
  9c:	6a c2       	rjmp	.+1236   	; 0x572 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_USART_send>:
	while (*str != 0x00)
	{
		USART_putByte(*str);
		str++;
	}
}
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <_USART_send+0x4>
  aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ae:	08 95       	ret

000000b0 <_setInputMode>:
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f 73       	andi	r24, 0x3F	; 63
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	80 7c       	andi	r24, 0xC0	; 192
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <IO_Mode>
  c0:	08 95       	ret

000000c2 <setupShiftIO>:
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	88 63       	ori	r24, 0x38	; 56
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <shiftOutByte>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	27 e0       	ldi	r18, 0x07	; 7
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	a7 e0       	ldi	r26, 0x07	; 7
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	44 23       	and	r20, r20
  da:	79 f0       	breq	.+30     	; 0xfa <shiftOutByte+0x30>
  dc:	fd 01       	movw	r30, r26
  de:	e2 1b       	sub	r30, r18
  e0:	f3 0b       	sbc	r31, r19
  e2:	ec 01       	movw	r28, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <shiftOutByte+0x20>
  e6:	d5 95       	asr	r29
  e8:	c7 95       	ror	r28
  ea:	ea 95       	dec	r30
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <shiftOutByte+0x1c>
  ee:	c0 ff       	sbrs	r28, 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <shiftOutByte+0x2c>
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	0e c0       	rjmp	.+28     	; 0x112 <shiftOutByte+0x48>
  f6:	5d 98       	cbi	0x0b, 5	; 11
  f8:	0c c0       	rjmp	.+24     	; 0x112 <shiftOutByte+0x48>
  fa:	fc 01       	movw	r30, r24
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <shiftOutByte+0x3a>
 100:	f5 95       	asr	r31
 102:	e7 95       	ror	r30
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <shiftOutByte+0x36>
 108:	e0 ff       	sbrs	r30, 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <shiftOutByte+0x46>
 10c:	5d 9a       	sbi	0x0b, 5	; 11
 10e:	01 c0       	rjmp	.+2      	; 0x112 <shiftOutByte+0x48>
 110:	5d 98       	cbi	0x0b, 5	; 11
 112:	5c 9a       	sbi	0x0b, 4	; 11
 114:	5c 98       	cbi	0x0b, 4	; 11
 116:	21 50       	subi	r18, 0x01	; 1
 118:	31 09       	sbc	r19, r1
 11a:	f0 f6       	brcc	.-68     	; 0xd8 <shiftOutByte+0xe>
 11c:	66 23       	and	r22, r22
 11e:	11 f0       	breq	.+4      	; 0x124 <shiftOutByte+0x5a>
 120:	5b 9a       	sbi	0x0b, 3	; 11
 122:	5b 98       	cbi	0x0b, 3	; 11
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <shiftOutShort>:
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	d8 2f       	mov	r29, r24
 130:	c6 2f       	mov	r28, r22
 132:	46 2f       	mov	r20, r22
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	89 2f       	mov	r24, r25
 138:	c8 df       	rcall	.-112    	; 0xca <shiftOutByte>
 13a:	4c 2f       	mov	r20, r28
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	8d 2f       	mov	r24, r29
 140:	c4 df       	rcall	.-120    	; 0xca <shiftOutByte>
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	5b 98       	cbi	0x0b, 3	; 11
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <writeSingleByte>:
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <writeSingleByte+0x8>
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	18 2f       	mov	r17, r24
 15a:	7a 83       	std	Y+2, r23	; 0x02
 15c:	69 83       	std	Y+1, r22	; 0x01
 15e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <IO_Mode>
 162:	81 11       	cpse	r24, r1
 164:	09 c0       	rjmp	.+18     	; 0x178 <writeSingleByte+0x2c>
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 6c       	ori	r24, 0xC0	; 192
 16a:	8a b9       	out	0x0a, r24	; 10
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	8f 63       	ori	r24, 0x3F	; 63
 170:	84 b9       	out	0x04, r24	; 4
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <IO_Mode>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	d5 df       	rcall	.-86     	; 0x12a <shiftOutShort>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <lastAddress+0x1>
 188:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lastAddress>
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 73       	andi	r24, 0x3F	; 63
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	91 2f       	mov	r25, r17
 196:	90 7c       	andi	r25, 0xC0	; 192
 198:	89 2b       	or	r24, r25
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	80 7c       	andi	r24, 0xC0	; 192
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	1f 73       	andi	r17, 0x3F	; 63
 1a6:	18 2b       	or	r17, r24
 1a8:	15 b9       	out	0x05, r17	; 5
 1aa:	5a 98       	cbi	0x0b, 2	; 11
 1ac:	5a 9a       	sbi	0x0b, 2	; 11
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	08 95       	ret

000001ba <setupFIFO>:
 1ba:	8b e0       	ldi	r24, 0x0B	; 11
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 1c2:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 1c6:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 1ca:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 1ce:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <buffer+0x68>
 1d2:	08 95       	ret

000001d4 <BufferIn>:
 1d4:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <buffer+0x66>
 1d8:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <buffer+0x67>
 1dc:	af 01       	movw	r20, r30
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <buffer+0x64>
 1e6:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <buffer+0x65>
 1ea:	42 17       	cp	r20, r18
 1ec:	53 07       	cpc	r21, r19
 1ee:	11 f1       	breq	.+68     	; 0x234 <BufferIn+0x60>
 1f0:	2b 50       	subi	r18, 0x0B	; 11
 1f2:	31 40       	sbci	r19, 0x01	; 1
 1f4:	19 f4       	brne	.+6      	; 0x1fc <BufferIn+0x28>
 1f6:	4e 56       	subi	r20, 0x6E	; 110
 1f8:	51 40       	sbci	r21, 0x01	; 1
 1fa:	f1 f0       	breq	.+60     	; 0x238 <BufferIn+0x64>
 1fc:	80 83       	st	Z, r24
 1fe:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <buffer+0x66>
 202:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <buffer+0x67>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	8e 36       	cpi	r24, 0x6E	; 110
 20c:	92 07       	cpc	r25, r18
 20e:	28 f4       	brcc	.+10     	; 0x21a <BufferIn+0x46>
 210:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 214:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 218:	06 c0       	rjmp	.+12     	; 0x226 <BufferIn+0x52>
 21a:	8b e0       	ldi	r24, 0x0B	; 11
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 222:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 226:	e3 e7       	ldi	r30, 0x73	; 115
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 83       	st	Z, r24
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret

0000023c <BufferOut>:
 23c:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <buffer+0x64>
 240:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <buffer+0x65>
 244:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <buffer+0x66>
 248:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <buffer+0x67>
 24c:	e2 17       	cp	r30, r18
 24e:	f3 07       	cpc	r31, r19
 250:	f1 f0       	breq	.+60     	; 0x28e <BufferOut+0x52>
 252:	20 81       	ld	r18, Z
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
 258:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <buffer+0x64>
 25c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <buffer+0x65>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	8e 36       	cpi	r24, 0x6E	; 110
 266:	9f 07       	cpc	r25, r31
 268:	28 f4       	brcc	.+10     	; 0x274 <BufferOut+0x38>
 26a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 26e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 272:	06 c0       	rjmp	.+12     	; 0x280 <BufferOut+0x44>
 274:	8b e0       	ldi	r24, 0x0B	; 11
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 27c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 280:	e3 e7       	ldi	r30, 0x73	; 115
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	80 81       	ld	r24, Z
 286:	81 50       	subi	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <setupSerial>:
 292:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 296:	87 e6       	ldi	r24, 0x67	; 103
 298:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 29c:	e0 ec       	ldi	r30, 0xC0	; 192
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	80 83       	st	Z, r24
 2a6:	e1 ec       	ldi	r30, 0xC1	; 193
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	80 83       	st	Z, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	88 61       	ori	r24, 0x18	; 24
 2b4:	80 83       	st	Z, r24
 2b6:	e2 ec       	ldi	r30, 0xC2	; 194
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	86 60       	ori	r24, 0x06	; 6
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <__vector_18>:
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	e0 ec       	ldi	r30, 0xC0	; 192
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	85 ff       	sbrs	r24, 5
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <__vector_18+0x26>
 2ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2f2:	70 df       	rcall	.-288    	; 0x1d4 <BufferIn>
 2f4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <buffer+0x68>
 2f8:	87 34       	cpi	r24, 0x47	; 71
 2fa:	20 f0       	brcs	.+8      	; 0x304 <__vector_18+0x42>
 2fc:	83 e1       	ldi	r24, 0x13	; 19
 2fe:	d0 de       	rcall	.-608    	; 0xa0 <_USART_send>
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <FLOW_STATUS>
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <USART_putByte>:
 326:	cf 93       	push	r28
 328:	c8 2f       	mov	r28, r24
 32a:	8f ee       	ldi	r24, 0xEF	; 239
 32c:	8c 0f       	add	r24, r28
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	20 f0       	brcs	.+8      	; 0x33a <USART_putByte+0x14>
 332:	cf 30       	cpi	r28, 0x0F	; 15
 334:	11 f0       	breq	.+4      	; 0x33a <USART_putByte+0x14>
 336:	c5 35       	cpi	r28, 0x55	; 85
 338:	31 f4       	brne	.+12     	; 0x346 <USART_putByte+0x20>
 33a:	8f e0       	ldi	r24, 0x0F	; 15
 33c:	b1 de       	rcall	.-670    	; 0xa0 <_USART_send>
 33e:	8c 2f       	mov	r24, r28
 340:	80 95       	com	r24
 342:	ae de       	rcall	.-676    	; 0xa0 <_USART_send>
 344:	02 c0       	rjmp	.+4      	; 0x34a <USART_putByte+0x24>
 346:	8c 2f       	mov	r24, r28
 348:	ab de       	rcall	.-682    	; 0xa0 <_USART_send>
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <setupEEPROM>:

//setup code - set pin modes
void setupEEPROM()
{
	//set pin for read mode
	_setInputMode();
 34e:	b0 de       	rcall	.-672    	; 0xb0 <_setInputMode>
	
	//set we direction reg
	DDRD |= WE;
 350:	52 9a       	sbi	0x0a, 2	; 10
	//set we high
	writeEnable_HIGH();
 352:	5a 9a       	sbi	0x0b, 2	; 11
 354:	08 95       	ret

00000356 <writeBulkData>:
	//write data byte
	_writeDataByte(data);
}

void writeBulkData(uint8_t *start)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <writeBulkData+0x6>
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	fc 01       	movw	r30, r24
	//build address, set bit 15 high, used for output enable
	volatile uint16_t address = (start[0]) << 8 | start[1] | 1 << 15;
 362:	80 81       	ld	r24, Z
 364:	21 81       	ldd	r18, Z+1	; 0x01
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	30 68       	ori	r19, 0x80	; 128
 36a:	38 2b       	or	r19, r24
 36c:	3a 83       	std	Y+2, r19	; 0x02
 36e:	29 83       	std	Y+1, r18	; 0x01
	//check page
	if ((lastAddress & EEPROM_PAGE_MASK) == (address & EEPROM_PAGE_MASK))
 370:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lastAddress>
 374:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <lastAddress+0x1>
 378:	29 81       	ldd	r18, Y+1	; 0x01
 37a:	3a 81       	ldd	r19, Y+2	; 0x02
 37c:	28 27       	eor	r18, r24
 37e:	39 27       	eor	r19, r25
 380:	20 7c       	andi	r18, 0xC0	; 192
 382:	3f 77       	andi	r19, 0x7F	; 127
 384:	23 2b       	or	r18, r19
 386:	79 f4       	brne	.+30     	; 0x3a6 <writeBulkData+0x50>
	{
		//write byte without delay
		writeSingleByte(start[2], address);
 388:	69 81       	ldd	r22, Y+1	; 0x01
 38a:	7a 81       	ldd	r23, Y+2	; 0x02
 38c:	82 81       	ldd	r24, Z+2	; 0x02
 38e:	de de       	rcall	.-580    	; 0x14c <writeSingleByte>
		//end bulk write cycle if buffer empty - give eeprom time to end write cycle
		if (buffer.counter < 3)
 390:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <buffer+0x68>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	88 f4       	brcc	.+34     	; 0x3ba <writeBulkData+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	8f e3       	ldi	r24, 0x3F	; 63
 39a:	9c e9       	ldi	r25, 0x9C	; 156
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <writeBulkData+0x46>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <writeBulkData+0x4c>
 3a2:	00 00       	nop
 3a4:	0a c0       	rjmp	.+20     	; 0x3ba <writeBulkData+0x64>
 3a6:	8f e3       	ldi	r24, 0x3F	; 63
 3a8:	9c e9       	ldi	r25, 0x9C	; 156
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <writeBulkData+0x54>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <writeBulkData+0x5a>
 3b0:	00 00       	nop
	}
	else
	{
		//page validation or max bytes written -  give eeprom time to end write cycle
		_delay_ms(10);
		writeSingleByte(start[2], address);
 3b2:	69 81       	ldd	r22, Y+1	; 0x01
 3b4:	7a 81       	ldd	r23, Y+2	; 0x02
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	c9 de       	rcall	.-622    	; 0x14c <writeSingleByte>
	}
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <readEEPROM>:

void readEEPROM(uint16_t startAddress, uint16_t endAddress)
{
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <readEEPROM+0xe>
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	7c 01       	movw	r14, r24
 3d8:	8b 01       	movw	r16, r22
	//check for correct pin mode
	if (IO_Mode)
 3da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <IO_Mode>
 3de:	81 11       	cpse	r24, r1
	{
		_setInputMode();
 3e0:	67 de       	rcall	.-818    	; 0xb0 <_setInputMode>
	}
	
	//read whole eeprom
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
 3e2:	fa 82       	std	Y+2, r15	; 0x02
 3e4:	e9 82       	std	Y+1, r14	; 0x01
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	80 17       	cp	r24, r16
 3ec:	91 07       	cpc	r25, r17
 3ee:	e0 f4       	brcc	.+56     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		//shift address high and low byte and set bit 15 low --> output enable
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	9f 77       	andi	r25, 0x7F	; 127
 3f8:	98 de       	rcall	.-720    	; 0x12a <shiftOutShort>

static uint8_t _readDataByte()
{
	//read single byte from eeprom
	uint8_t data = 0;
	data |= (PIND & PortD_Mask);
 3fa:	29 b1       	in	r18, 0x09	; 9
	data |= (PINB & PortB_Mask);
 3fc:	93 b1       	in	r25, 0x03	; 3
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
	{
		//shift address high and low byte and set bit 15 low --> output enable
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
		//read byte and send via serial
		USART_putByte(_readDataByte());
 3fe:	20 7c       	andi	r18, 0xC0	; 192
 400:	89 2f       	mov	r24, r25
 402:	8f 73       	andi	r24, 0x3F	; 63
 404:	82 2b       	or	r24, r18
 406:	8f df       	rcall	.-226    	; 0x326 <USART_putByte>
 408:	8f e8       	ldi	r24, 0x8F	; 143
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
	{
		_setInputMode();
	}
	
	//read whole eeprom
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	80 17       	cp	r24, r16
 424:	91 07       	cpc	r25, r17
 426:	20 f3       	brcs	.-56     	; 0x3f0 <readEEPROM+0x2c>
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
		//read byte and send via serial
		USART_putByte(_readDataByte());
		_delay_ms(0.1);
	}
}
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	08 95       	ret

0000043a <EvalCommand>:
}

//evaluate command buffer for instructions
void EvalCommand()
{
	if (writeMode)
 43a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 43e:	88 23       	and	r24, r24
 440:	69 f0       	breq	.+26     	; 0x45c <EvalCommand+0x22>
	{
		if (command[0] != 0xFF) //--> valid eeprom address -> max 15bit -> 0xff as address high-byte would be invalid
 442:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command>
 446:	8f 3f       	cpi	r24, 0xFF	; 255
 448:	21 f0       	breq	.+8      	; 0x452 <EvalCommand+0x18>
		{
			//write command data to eeprom
			writeBulkData(command);
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	83 cf       	rjmp	.-250    	; 0x356 <writeBulkData>
 450:	08 95       	ret
			//_delay_ms(8);
		}
		else
		{
			//leave write mode
			writeMode = 0;
 452:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			//confirm mode switch with ACK
			SEND_ACK();
 456:	85 e5       	ldi	r24, 0x55	; 85
 458:	23 ce       	rjmp	.-954    	; 0xa0 <_USART_send>
 45a:	08 95       	ret
		}
	}
	
	else if (command[0] == enableWrite)
 45c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	29 f4       	brne	.+10     	; 0x46e <EvalCommand+0x34>
	{
		//switch programmer to write mode
		writeMode = 1;
 464:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//confirm mode switch with ACK
		SEND_ACK();
 468:	85 e5       	ldi	r24, 0x55	; 85
 46a:	1a ce       	rjmp	.-972    	; 0xa0 <_USART_send>
 46c:	08 95       	ret
	}
	else if (command[0] == enableRead)
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	d1 f4       	brne	.+52     	; 0x4a6 <EvalCommand+0x6c>
	{
		if (readStartAddress < readEndAddress)
 472:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <readStartAddress>
 476:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <readStartAddress+0x1>
 47a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 47e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 482:	28 17       	cp	r18, r24
 484:	39 07       	cpc	r19, r25
 486:	60 f4       	brcc	.+24     	; 0x4a0 <EvalCommand+0x66>
		{
			readEEPROM(readStartAddress, readEndAddress);
 488:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <readEndAddress>
 48c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <readEndAddress+0x1>
 490:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 494:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
			//read finished - confirm with ACK
			SEND_ACK();
 498:	95 df       	rcall	.-214    	; 0x3c4 <readEEPROM>
 49a:	85 e5       	ldi	r24, 0x55	; 85
 49c:	01 ce       	rjmp	.-1022   	; 0xa0 <_USART_send>
		}
		else
		{
			//invalid address configuration
			SEND_ERR();
 49e:	08 95       	ret
 4a0:	82 e1       	ldi	r24, 0x12	; 18
 4a2:	fe cd       	rjmp	.-1028   	; 0xa0 <_USART_send>
 4a4:	08 95       	ret
		}
	}
	else if (command[0] == setReadStartAdd)
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	e9 f4       	brne	.+58     	; 0x4e4 <EvalCommand+0xaa>
	{
		//build 16 bit address from 2 bytes
		readStartAddress = 0;
 4aa:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <readStartAddress+0x1>
 4ae:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <readStartAddress>
		readStartAddress |= (uint16_t)command[1] << 8;
 4b2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 4b6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
 4ba:	e8 e0       	ldi	r30, 0x08	; 8
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	21 81       	ldd	r18, Z+1	; 0x01
 4c0:	92 2b       	or	r25, r18
 4c2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <readStartAddress+0x1>
 4c6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <readStartAddress>
		readStartAddress |= (uint16_t)command[2];
 4ca:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 4ce:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
 4d2:	22 81       	ldd	r18, Z+2	; 0x02
 4d4:	82 2b       	or	r24, r18
 4d6:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <readStartAddress+0x1>
 4da:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <readStartAddress>
		SEND_ACK();
 4de:	85 e5       	ldi	r24, 0x55	; 85
 4e0:	df cd       	rjmp	.-1090   	; 0xa0 <_USART_send>
 4e2:	08 95       	ret
	}
	else if (command[0] == setReadEndAdd)
 4e4:	86 30       	cpi	r24, 0x06	; 6
 4e6:	e9 f4       	brne	.+58     	; 0x522 <EvalCommand+0xe8>
	{
		//build 16 bit address from 2 bytes
		readEndAddress = 0;
 4e8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <readEndAddress+0x1>
 4ec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readEndAddress>
		readEndAddress |= (uint16_t)command[1] << 8;
 4f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 4f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 4f8:	e8 e0       	ldi	r30, 0x08	; 8
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	21 81       	ldd	r18, Z+1	; 0x01
 4fe:	92 2b       	or	r25, r18
 500:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <readEndAddress+0x1>
 504:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readEndAddress>
		readEndAddress |= (uint16_t)command[2];
 508:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 50c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 510:	22 81       	ldd	r18, Z+2	; 0x02
 512:	82 2b       	or	r24, r18
 514:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <readEndAddress+0x1>
		SEND_ACK();
 518:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readEndAddress>
 51c:	85 e5       	ldi	r24, 0x55	; 85
 51e:	c0 cd       	rjmp	.-1152   	; 0xa0 <_USART_send>
	}
	else
	{
		SEND_ERR();
 520:	08 95       	ret
 522:	82 e1       	ldi	r24, 0x12	; 18
 524:	bd cd       	rjmp	.-1158   	; 0xa0 <_USART_send>
 526:	08 95       	ret

00000528 <main>:
void EvalCommand(void);

int main(void)
{
	//startup code - setup pin modes etc
	setupShiftIO();
 528:	cc dd       	rcall	.-1128   	; 0xc2 <setupShiftIO>
	setupSerial();
 52a:	b3 de       	rcall	.-666    	; 0x292 <setupSerial>
	setupEEPROM();
 52c:	10 df       	rcall	.-480    	; 0x34e <setupEEPROM>
 52e:	45 de       	rcall	.-886    	; 0x1ba <setupFIFO>
	setupFIFO();
 530:	78 94       	sei
	
	//enable interrupts
	sei();
 532:	85 e5       	ldi	r24, 0x55	; 85
	
	//indicate successful startup, ready for data
	SEND_ACK();
 534:	b5 dd       	rcall	.-1174   	; 0xa0 <_USART_send>
 536:	c3 e7       	ldi	r28, 0x73	; 115
 538:	d1 e0       	ldi	r29, 0x01	; 1
	
	//loop to process commands
	while (1)
	{
		//flow control paused and buffer getting empty --> reenable serial comm with XON
		if (!FLOW_STATUS && buffer.counter < BUFFER_THREASHOLD_LOWER)
 53a:	11 e0       	ldi	r17, 0x01	; 1
 53c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <FLOW_STATUS>
 540:	81 11       	cpse	r24, r1
 542:	07 c0       	rjmp	.+14     	; 0x552 <main+0x2a>
 544:	88 81       	ld	r24, Y
 546:	8a 30       	cpi	r24, 0x0A	; 10
 548:	20 f4       	brcc	.+8      	; 0x552 <main+0x2a>
 54a:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <FLOW_STATUS>
		{
			FLOW_STATUS = 1;
 54e:	81 e1       	ldi	r24, 0x11	; 17
			_USART_send(XON);
 550:	a7 dd       	rcall	.-1202   	; 0xa0 <_USART_send>
 552:	88 81       	ld	r24, Y
 554:	83 30       	cpi	r24, 0x03	; 3
		}
				
		//only run if buffer contains at least 3 bytes
		if (buffer.counter < 3)
 556:	90 f3       	brcs	.-28     	; 0x53c <main+0x14>
 558:	f8 94       	cli
		}
		
		//disable interrupts -> atomic reading from fifo
		cli();
		//read 3 bytes
		BufferOut(command);
 55a:	88 e0       	ldi	r24, 0x08	; 8
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	6e de       	rcall	.-804    	; 0x23c <BufferOut>
		BufferOut(command+1);
 560:	89 e0       	ldi	r24, 0x09	; 9
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	6b de       	rcall	.-810    	; 0x23c <BufferOut>
		BufferOut(command+2);
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	68 de       	rcall	.-816    	; 0x23c <BufferOut>
 56c:	78 94       	sei
		//re-enable interrupts
		sei();
 56e:	65 df       	rcall	.-310    	; 0x43a <EvalCommand>
		//parse 3 byte command
		EvalCommand();
 570:	e5 cf       	rjmp	.-54     	; 0x53c <main+0x14>

00000572 <_exit>:
 572:	f8 94       	cli

00000574 <__stop_program>:
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stop_program>
