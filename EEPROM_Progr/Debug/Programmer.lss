
Programmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005a2  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800102  00800102  00000638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef1  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000936  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000761f  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f6  00000000  00000000  00009fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a65  00000000  00000000  0000a769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	05 c1       	rjmp	.+522    	; 0x254 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 37       	cpi	r26, 0x76	; 118
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	5c d2       	rcall	.+1208   	; 0x554 <main>
  9c:	80 c2       	rjmp	.+1280   	; 0x59e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_USART_send>:
	while (*str != 0x00)
	{
		USART_putByte(*str);
		str++;
	}
}
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <_USART_send+0x4>
  aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ae:	08 95       	ret

000000b0 <_setInputMode>:
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f 73       	andi	r24, 0x3F	; 63
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	80 7c       	andi	r24, 0xC0	; 192
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <IO_Mode>
  c0:	08 95       	ret

000000c2 <shiftOutByte>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	27 e0       	ldi	r18, 0x07	; 7
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a7 e0       	ldi	r26, 0x07	; 7
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	44 23       	and	r20, r20
  d2:	79 f0       	breq	.+30     	; 0xf2 <shiftOutByte+0x30>
  d4:	fd 01       	movw	r30, r26
  d6:	e2 1b       	sub	r30, r18
  d8:	f3 0b       	sbc	r31, r19
  da:	ec 01       	movw	r28, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <shiftOutByte+0x20>
  de:	d5 95       	asr	r29
  e0:	c7 95       	ror	r28
  e2:	ea 95       	dec	r30
  e4:	e2 f7       	brpl	.-8      	; 0xde <shiftOutByte+0x1c>
  e6:	c0 ff       	sbrs	r28, 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <shiftOutByte+0x2c>
  ea:	5d 9a       	sbi	0x0b, 5	; 11
  ec:	0e c0       	rjmp	.+28     	; 0x10a <shiftOutByte+0x48>
  ee:	5d 98       	cbi	0x0b, 5	; 11
  f0:	0c c0       	rjmp	.+24     	; 0x10a <shiftOutByte+0x48>
  f2:	fc 01       	movw	r30, r24
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <shiftOutByte+0x3a>
  f8:	f5 95       	asr	r31
  fa:	e7 95       	ror	r30
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <shiftOutByte+0x36>
 100:	e0 ff       	sbrs	r30, 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <shiftOutByte+0x46>
 104:	5d 9a       	sbi	0x0b, 5	; 11
 106:	01 c0       	rjmp	.+2      	; 0x10a <shiftOutByte+0x48>
 108:	5d 98       	cbi	0x0b, 5	; 11
 10a:	5c 9a       	sbi	0x0b, 4	; 11
 10c:	5c 98       	cbi	0x0b, 4	; 11
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	f0 f6       	brcc	.-68     	; 0xd0 <shiftOutByte+0xe>
 114:	66 23       	and	r22, r22
 116:	11 f0       	breq	.+4      	; 0x11c <shiftOutByte+0x5a>
 118:	5b 9a       	sbi	0x0b, 3	; 11
 11a:	5b 98       	cbi	0x0b, 3	; 11
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <shiftOutShort>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	d8 2f       	mov	r29, r24
 128:	c6 2f       	mov	r28, r22
 12a:	46 2f       	mov	r20, r22
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	89 2f       	mov	r24, r25
 130:	c8 df       	rcall	.-112    	; 0xc2 <shiftOutByte>
 132:	4c 2f       	mov	r20, r28
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	8d 2f       	mov	r24, r29
 138:	c4 df       	rcall	.-120    	; 0xc2 <shiftOutByte>
 13a:	5b 9a       	sbi	0x0b, 3	; 11
 13c:	5b 98       	cbi	0x0b, 3	; 11
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <setupShiftIO>:
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	88 63       	ori	r24, 0x38	; 56
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	08 95       	ret

0000014c <setupFIFO>:
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 154:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 158:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 15c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 160:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <buffer+0x68>
 164:	08 95       	ret

00000166 <BufferIn>:
 166:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <buffer+0x66>
 16a:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <buffer+0x67>
 16e:	af 01       	movw	r20, r30
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
 174:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <buffer+0x64>
 178:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <buffer+0x65>
 17c:	42 17       	cp	r20, r18
 17e:	53 07       	cpc	r21, r19
 180:	11 f1       	breq	.+68     	; 0x1c6 <BufferIn+0x60>
 182:	2b 50       	subi	r18, 0x0B	; 11
 184:	31 40       	sbci	r19, 0x01	; 1
 186:	19 f4       	brne	.+6      	; 0x18e <BufferIn+0x28>
 188:	4e 56       	subi	r20, 0x6E	; 110
 18a:	51 40       	sbci	r21, 0x01	; 1
 18c:	f1 f0       	breq	.+60     	; 0x1ca <BufferIn+0x64>
 18e:	80 83       	st	Z, r24
 190:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <buffer+0x66>
 194:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <buffer+0x67>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	8e 36       	cpi	r24, 0x6E	; 110
 19e:	92 07       	cpc	r25, r18
 1a0:	28 f4       	brcc	.+10     	; 0x1ac <BufferIn+0x46>
 1a2:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 1a6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <BufferIn+0x52>
 1ac:	8b e0       	ldi	r24, 0x0B	; 11
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <buffer+0x67>
 1b4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <buffer+0x66>
 1b8:	e3 e7       	ldi	r30, 0x73	; 115
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 83       	st	Z, r24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret

000001ce <BufferOut>:
 1ce:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <buffer+0x64>
 1d2:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <buffer+0x65>
 1d6:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <buffer+0x66>
 1da:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <buffer+0x67>
 1de:	e2 17       	cp	r30, r18
 1e0:	f3 07       	cpc	r31, r19
 1e2:	f1 f0       	breq	.+60     	; 0x220 <BufferOut+0x52>
 1e4:	20 81       	ld	r18, Z
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
 1ea:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <buffer+0x64>
 1ee:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <buffer+0x65>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	8e 36       	cpi	r24, 0x6E	; 110
 1f8:	9f 07       	cpc	r25, r31
 1fa:	28 f4       	brcc	.+10     	; 0x206 <BufferOut+0x38>
 1fc:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 200:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 204:	06 c0       	rjmp	.+12     	; 0x212 <BufferOut+0x44>
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <buffer+0x65>
 20e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <buffer+0x64>
 212:	e3 e7       	ldi	r30, 0x73	; 115
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	80 83       	st	Z, r24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <setupSerial>:
 224:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 228:	87 e6       	ldi	r24, 0x67	; 103
 22a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 22e:	e0 ec       	ldi	r30, 0xC0	; 192
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	80 83       	st	Z, r24
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	80 83       	st	Z, r24
 242:	80 81       	ld	r24, Z
 244:	88 61       	ori	r24, 0x18	; 24
 246:	80 83       	st	Z, r24
 248:	e2 ec       	ldi	r30, 0xC2	; 194
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	86 60       	ori	r24, 0x06	; 6
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <__vector_18>:
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
 276:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <buffer+0x68>
 27a:	81 35       	cpi	r24, 0x51	; 81
 27c:	20 f0       	brcs	.+8      	; 0x286 <__vector_18+0x32>
 27e:	83 e1       	ldi	r24, 0x13	; 19
 280:	0f df       	rcall	.-482    	; 0xa0 <_USART_send>
 282:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <FLOW_STATUS>
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	85 ff       	sbrs	r24, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <__vector_18+0x36>
 290:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 294:	68 df       	rcall	.-304    	; 0x166 <BufferIn>
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <USART_putByte>:
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	8f ee       	ldi	r24, 0xEF	; 239
 2be:	8c 0f       	add	r24, r28
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	20 f0       	brcs	.+8      	; 0x2cc <USART_putByte+0x14>
 2c4:	cf 30       	cpi	r28, 0x0F	; 15
 2c6:	11 f0       	breq	.+4      	; 0x2cc <USART_putByte+0x14>
 2c8:	c5 35       	cpi	r28, 0x55	; 85
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <USART_putByte+0x20>
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	e8 de       	rcall	.-560    	; 0xa0 <_USART_send>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	80 95       	com	r24
 2d4:	e5 de       	rcall	.-566    	; 0xa0 <_USART_send>
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <USART_putByte+0x24>
 2d8:	8c 2f       	mov	r24, r28
 2da:	e2 de       	rcall	.-572    	; 0xa0 <_USART_send>
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <setupEEPROM>:

//setup code - set pin modes
void setupEEPROM()
{
	//set pin for read mode
	_setInputMode();
 2e0:	e7 de       	rcall	.-562    	; 0xb0 <_setInputMode>
	
	//set we direction reg
	DDRD |= WE;
 2e2:	52 9a       	sbi	0x0a, 2	; 10
	//set we high
	writeEnable_HIGH();
 2e4:	5a 9a       	sbi	0x0b, 2	; 11
 2e6:	08 95       	ret

000002e8 <writeSingleByte>:
	
}

void writeSingleByte(uint8_t *start)
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <writeSingleByte+0xa>
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	8c 01       	movw	r16, r24
	//check for correct pin mode
	if (!IO_Mode)
 2f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <IO_Mode>
 2fc:	81 11       	cpse	r24, r1
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <writeSingleByte+0x2a>
	IO_Mode = 0;
}

static void _setOutputMode()
{
	DDRD |= D6 | D7;
 300:	8a b1       	in	r24, 0x0a	; 10
 302:	80 6c       	ori	r24, 0xC0	; 192
 304:	8a b9       	out	0x0a, r24	; 10
	DDRB |= D0 | D1 | D2 | D3 | D4 | D5;
 306:	84 b1       	in	r24, 0x04	; 4
 308:	8f 63       	ori	r24, 0x3F	; 63
 30a:	84 b9       	out	0x04, r24	; 4
	
	IO_Mode = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <IO_Mode>
	if (!IO_Mode)
	{
		_setOutputMode();
	}
	//create address
	volatile uint16_t address = (*start) << 8 | start[1] | 1 << 15;
 312:	f8 01       	movw	r30, r16
 314:	20 81       	ld	r18, Z
 316:	81 81       	ldd	r24, Z+1	; 0x01
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 68       	ori	r25, 0x80	; 128
 31c:	92 2b       	or	r25, r18
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	89 83       	std	Y+1, r24	; 0x01
	//shift out address
	shiftOutShort(address, MSBFIRST);
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	fc de       	rcall	.-520    	; 0x122 <shiftOutShort>
	//_delay_ms(0.01)
	lastAddress = address;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <lastAddress+0x1>
 332:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lastAddress>
	//write data byte
	_writeDataByte(start[2]);
 336:	f8 01       	movw	r30, r16
 338:	82 81       	ldd	r24, Z+2	; 0x02
}

static void _writeDataByte(uint8_t data)
{
	//set portD
	PORTD &= ~PortD_Mask;
 33a:	9b b1       	in	r25, 0x0b	; 11
 33c:	9f 73       	andi	r25, 0x3F	; 63
 33e:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (data & PortD_Mask);
 340:	9b b1       	in	r25, 0x0b	; 11
 342:	28 2f       	mov	r18, r24
 344:	20 7c       	andi	r18, 0xC0	; 192
 346:	92 2b       	or	r25, r18
 348:	9b b9       	out	0x0b, r25	; 11
	//
	////set portB
	PORTB &= ~PortB_Mask;
 34a:	95 b1       	in	r25, 0x05	; 5
 34c:	90 7c       	andi	r25, 0xC0	; 192
 34e:	95 b9       	out	0x05, r25	; 5
	PORTB |= (data & PortB_Mask);
 350:	95 b1       	in	r25, 0x05	; 5
 352:	8f 73       	andi	r24, 0x3F	; 63
 354:	89 2b       	or	r24, r25
 356:	85 b9       	out	0x05, r24	; 5
	
	//latch add --> falling edge
	writeEnable_LOW();
 358:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	f5 e3       	ldi	r31, 0x35	; 53
 35c:	fa 95       	dec	r31
 35e:	f1 f7       	brne	.-4      	; 0x35c <writeSingleByte+0x74>
 360:	00 00       	nop
	_delay_ms(0.01);
	//latch data --> rising edge
	writeEnable_HIGH();
 362:	5a 9a       	sbi	0x0b, 2	; 11
	shiftOutShort(address, MSBFIRST);
	//_delay_ms(0.01)
	lastAddress = address;
	//write data byte
	_writeDataByte(start[2]);
}
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <writeBulkData>:

void writeBulkData(uint8_t *start)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <writeBulkData+0x6>
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	fc 01       	movw	r30, r24
	volatile uint16_t address = (start[0]) << 8 | start[1];
 37e:	20 81       	ld	r18, Z
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	32 2f       	mov	r19, r18
 384:	22 27       	eor	r18, r18
 386:	81 81       	ldd	r24, Z+1	; 0x01
 388:	28 2b       	or	r18, r24
 38a:	3a 83       	std	Y+2, r19	; 0x02
 38c:	29 83       	std	Y+1, r18	; 0x01
	//check page
	if ((lastAddress & EEPROM_PAGE_MASK) == (address & EEPROM_PAGE_MASK))
 38e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <lastAddress>
 392:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <lastAddress+0x1>
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	28 27       	eor	r18, r24
 39c:	39 27       	eor	r19, r25
 39e:	20 7c       	andi	r18, 0xC0	; 192
 3a0:	3f 77       	andi	r19, 0x7F	; 127
 3a2:	23 2b       	or	r18, r19
 3a4:	69 f4       	brne	.+26     	; 0x3c0 <writeBulkData+0x4e>
	{
		writeSingleByte(start);
 3a6:	cf 01       	movw	r24, r30
 3a8:	9f df       	rcall	.-194    	; 0x2e8 <writeSingleByte>
		//end bulk write cycle if buffer empty
		if (buffer.counter < 3)
 3aa:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <buffer+0x68>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	d0 f4       	brcc	.+52     	; 0x3e6 <writeBulkData+0x74>
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	9c e7       	ldi	r25, 0x7C	; 124
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <writeBulkData+0x44>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <writeBulkData+0x4a>
 3bc:	00 00       	nop
 3be:	13 c0       	rjmp	.+38     	; 0x3e6 <writeBulkData+0x74>
			_delay_ms(8);
		}
	}
	else
	{
		while(_readDataByte() != start[2])
 3c0:	32 81       	ldd	r19, Z+2	; 0x02
}

static uint8_t _readDataByte()
{
	uint8_t data = 0;
	data |= (PIND & PortD_Mask);
 3c2:	29 b1       	in	r18, 0x09	; 9
	data |= (PINB & PortB_Mask);
 3c4:	93 b1       	in	r25, 0x03	; 3
			_delay_ms(8);
		}
	}
	else
	{
		while(_readDataByte() != start[2])
 3c6:	20 7c       	andi	r18, 0xC0	; 192
 3c8:	9f 73       	andi	r25, 0x3F	; 63
 3ca:	92 2b       	or	r25, r18
 3cc:	39 13       	cpse	r19, r25
 3ce:	f9 cf       	rjmp	.-14     	; 0x3c2 <writeBulkData+0x50>
 3d0:	9f ef       	ldi	r25, 0xFF	; 255
 3d2:	21 ee       	ldi	r18, 0xE1	; 225
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	20 40       	sbci	r18, 0x00	; 0
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <writeBulkData+0x64>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <writeBulkData+0x6e>
 3e0:	00 00       	nop
		{
			;
		}
		_delay_ms(100);
		writeSingleByte(start);
 3e2:	cf 01       	movw	r24, r30
 3e4:	81 df       	rcall	.-254    	; 0x2e8 <writeSingleByte>
	}
}
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <readEEPROM>:

void readEEPROM(uint16_t startAddress, uint16_t endAddress)
{
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <readEEPROM+0xe>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	7c 01       	movw	r14, r24
 404:	8b 01       	movw	r16, r22
	//check for correct pin mode
	if (IO_Mode)
 406:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <IO_Mode>
 40a:	81 11       	cpse	r24, r1
	{
		_setInputMode();
 40c:	51 de       	rcall	.-862    	; 0xb0 <_setInputMode>
	}
	
	//read whole eeprom
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
 40e:	fa 82       	std	Y+2, r15	; 0x02
 410:	e9 82       	std	Y+1, r14	; 0x01
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	80 17       	cp	r24, r16
 418:	91 07       	cpc	r25, r17
 41a:	e0 f4       	brcc	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		//shift address high and low byte
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	9f 77       	andi	r25, 0x7F	; 127
 424:	7e de       	rcall	.-772    	; 0x122 <shiftOutShort>
}

static uint8_t _readDataByte()
{
	uint8_t data = 0;
	data |= (PIND & PortD_Mask);
 426:	29 b1       	in	r18, 0x09	; 9
	data |= (PINB & PortB_Mask);
 428:	93 b1       	in	r25, 0x03	; 3
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
	{
		//shift address high and low byte
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
		//read byte and send via serial
		USART_putByte(_readDataByte());
 42a:	20 7c       	andi	r18, 0xC0	; 192
 42c:	89 2f       	mov	r24, r25
 42e:	8f 73       	andi	r24, 0x3F	; 63
 430:	82 2b       	or	r24, r18
 432:	42 df       	rcall	.-380    	; 0x2b8 <USART_putByte>
 434:	8f e8       	ldi	r24, 0x8F	; 143
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	{
		_setInputMode();
	}
	
	//read whole eeprom
	for (volatile uint16_t i = startAddress; i < endAddress; i++)
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	80 17       	cp	r24, r16
 450:	91 07       	cpc	r25, r17
 452:	20 f3       	brcs	.-56     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		shiftOutShort(i & ~(1 << 15), MSBFIRST);
		//read byte and send via serial
		USART_putByte(_readDataByte());
		_delay_ms(0.1);
	}
}
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	08 95       	ret

00000466 <EvalCommand>:
}

//evaluate command buffer for instructions
void EvalCommand()
{
	if (writeMode)
 466:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 46a:	88 23       	and	r24, r24
 46c:	69 f0       	breq	.+26     	; 0x488 <EvalCommand+0x22>
	{
		if (command[0] != 0xFF) //--> valid eeprom address -> max 15bit -> 0xff as address high-byte would be invalid
 46e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command>
 472:	8f 3f       	cpi	r24, 0xFF	; 255
 474:	21 f0       	breq	.+8      	; 0x47e <EvalCommand+0x18>
		{
			//write command data to eeprom
			writeBulkData(command);
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	7b cf       	rjmp	.-266    	; 0x372 <writeBulkData>
 47c:	08 95       	ret
			//_delay_ms(8);
		}
		else
		{
			//leave write mode
			writeMode = 0;
 47e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			//confirm mode switch with ACK
			SEND_ACK();
 482:	85 e5       	ldi	r24, 0x55	; 85
 484:	0d ce       	rjmp	.-998    	; 0xa0 <_USART_send>
 486:	08 95       	ret
		}
	}
	
	else if (command[0] == enableWrite)
 488:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	29 f4       	brne	.+10     	; 0x49a <EvalCommand+0x34>
	{
		//switch programmer to write mode
		writeMode = 1;
 490:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//confirm mode switch with ACK
		SEND_ACK();
 494:	85 e5       	ldi	r24, 0x55	; 85
 496:	04 ce       	rjmp	.-1016   	; 0xa0 <_USART_send>
 498:	08 95       	ret
	}
	else if (command[0] == enableRead)
 49a:	84 30       	cpi	r24, 0x04	; 4
 49c:	d1 f4       	brne	.+52     	; 0x4d2 <EvalCommand+0x6c>
	{
		if (readStartAddress < readEndAddress)
 49e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <readStartAddress>
 4a2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <readStartAddress+0x1>
 4a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 4aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 4ae:	28 17       	cp	r18, r24
 4b0:	39 07       	cpc	r19, r25
 4b2:	60 f4       	brcc	.+24     	; 0x4cc <EvalCommand+0x66>
		{
			readEEPROM(readStartAddress, readEndAddress);
 4b4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <readEndAddress>
 4b8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <readEndAddress+0x1>
 4bc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 4c0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
			//read finished - confirm with ACK
			SEND_ACK();
 4c4:	95 df       	rcall	.-214    	; 0x3f0 <readEEPROM>
 4c6:	85 e5       	ldi	r24, 0x55	; 85
 4c8:	eb cd       	rjmp	.-1066   	; 0xa0 <_USART_send>
		}
		else
		{
			//invalid address configuration
			SEND_ERR();
 4ca:	08 95       	ret
 4cc:	82 e1       	ldi	r24, 0x12	; 18
 4ce:	e8 cd       	rjmp	.-1072   	; 0xa0 <_USART_send>
 4d0:	08 95       	ret
		}
	}
	else if (command[0] == setReadStartAdd)
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	e9 f4       	brne	.+58     	; 0x510 <EvalCommand+0xaa>
	{
		//build 16 bit address from 2 bytes
		readStartAddress = 0;
 4d6:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <readStartAddress+0x1>
 4da:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <readStartAddress>
		readStartAddress |= (uint16_t)command[1] << 8;
 4de:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 4e2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
 4e6:	e8 e0       	ldi	r30, 0x08	; 8
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	21 81       	ldd	r18, Z+1	; 0x01
 4ec:	92 2b       	or	r25, r18
 4ee:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <readStartAddress+0x1>
 4f2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <readStartAddress>
		readStartAddress |= (uint16_t)command[2];
 4f6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <readStartAddress>
 4fa:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <readStartAddress+0x1>
 4fe:	22 81       	ldd	r18, Z+2	; 0x02
 500:	82 2b       	or	r24, r18
 502:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <readStartAddress+0x1>
 506:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <readStartAddress>
		SEND_ACK();
 50a:	85 e5       	ldi	r24, 0x55	; 85
 50c:	c9 cd       	rjmp	.-1134   	; 0xa0 <_USART_send>
 50e:	08 95       	ret
	}
	else if (command[0] == setReadEndAdd)
 510:	86 30       	cpi	r24, 0x06	; 6
 512:	e9 f4       	brne	.+58     	; 0x54e <EvalCommand+0xe8>
	{
		//build 16 bit address from 2 bytes
		readEndAddress = 0;
 514:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <readEndAddress+0x1>
 518:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readEndAddress>
		readEndAddress |= (uint16_t)command[1] << 8;
 51c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 520:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 524:	e8 e0       	ldi	r30, 0x08	; 8
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	21 81       	ldd	r18, Z+1	; 0x01
 52a:	92 2b       	or	r25, r18
 52c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <readEndAddress+0x1>
 530:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readEndAddress>
		readEndAddress |= (uint16_t)command[2];
 534:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readEndAddress>
 538:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readEndAddress+0x1>
 53c:	22 81       	ldd	r18, Z+2	; 0x02
 53e:	82 2b       	or	r24, r18
 540:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <readEndAddress+0x1>
		SEND_ACK();
 544:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readEndAddress>
 548:	85 e5       	ldi	r24, 0x55	; 85
 54a:	aa cd       	rjmp	.-1196   	; 0xa0 <_USART_send>
	}
	else
	{
		SEND_ERR();
 54c:	08 95       	ret
 54e:	82 e1       	ldi	r24, 0x12	; 18
 550:	a7 cd       	rjmp	.-1202   	; 0xa0 <_USART_send>
 552:	08 95       	ret

00000554 <main>:
void EvalCommand(void);

int main(void)
{
	//startup code - setup pin modes etc
	setupShiftIO();
 554:	f7 dd       	rcall	.-1042   	; 0x144 <setupShiftIO>
	setupSerial();
 556:	66 de       	rcall	.-820    	; 0x224 <setupSerial>
	setupEEPROM();
 558:	c3 de       	rcall	.-634    	; 0x2e0 <setupEEPROM>
 55a:	f8 dd       	rcall	.-1040   	; 0x14c <setupFIFO>
	setupFIFO();
 55c:	78 94       	sei
	
	//enable interrupts
	sei();
 55e:	85 e5       	ldi	r24, 0x55	; 85
	
	//indicate successful startup, ready for data
	SEND_ACK();
 560:	9f dd       	rcall	.-1218   	; 0xa0 <_USART_send>
 562:	c3 e7       	ldi	r28, 0x73	; 115
 564:	d1 e0       	ldi	r29, 0x01	; 1
	
	//loop and wait for serial interrupt
	while (1)
	{
		//flow control paused and buffer getting empty --> reenable serial comm with XON
		if (!FLOW_STATUS && buffer.counter < BUFFER_THREASHOLD_LOWER)
 566:	11 e0       	ldi	r17, 0x01	; 1
 568:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <FLOW_STATUS>
 56c:	81 11       	cpse	r24, r1
 56e:	07 c0       	rjmp	.+14     	; 0x57e <main+0x2a>
 570:	88 81       	ld	r24, Y
 572:	84 31       	cpi	r24, 0x14	; 20
 574:	20 f4       	brcc	.+8      	; 0x57e <main+0x2a>
 576:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <FLOW_STATUS>
		{
			FLOW_STATUS = 1;
 57a:	81 e1       	ldi	r24, 0x11	; 17
			_USART_send(XON);
 57c:	91 dd       	rcall	.-1246   	; 0xa0 <_USART_send>
 57e:	88 81       	ld	r24, Y
 580:	83 30       	cpi	r24, 0x03	; 3
		}
				
		//only run if buffer contains at least 3 bytes
		if (buffer.counter < 3)
 582:	90 f3       	brcs	.-28     	; 0x568 <main+0x14>
 584:	f8 94       	cli
		}
		
		//disable interrupts -> atomic reading from fifo
		cli();
		//read 3 bytes
		BufferOut(command);
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	21 de       	rcall	.-958    	; 0x1ce <BufferOut>
		BufferOut(command+1);
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	1e de       	rcall	.-964    	; 0x1ce <BufferOut>
		BufferOut(command+2);
 592:	8a e0       	ldi	r24, 0x0A	; 10
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	1b de       	rcall	.-970    	; 0x1ce <BufferOut>
 598:	78 94       	sei
		//re-enable interrupts
		sei();
 59a:	65 df       	rcall	.-310    	; 0x466 <EvalCommand>
		//parse 3 byte command
		EvalCommand();
 59c:	e5 cf       	rjmp	.-54     	; 0x568 <main+0x14>

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
